#include <unistd.h>
#include <stdio.h>
#include <signal.h>
#include <stdlib.h>
#include <sys/wait.h>

void
killpid(int *mas_pid, int kol, int *fd) {
    for (int i = 0; i < kol; i++) {
        close(fd[0]);
        close(fd[1]);
        kill(mas_pid[i], SIGKILL);
    }
    while (wait(NULL) != -1);
    close(0);
    free(mas_pid);
    exit(1);
}
int
main(int argc, const char * argv[]) {
    int fd[2];
    int n = argc - 1;
    if (!n) {
        exit(0);
    }
    int *mas = calloc(n, sizeof(n));
    if (mas == NULL) {
        exit(1);
    }
    for (int i = 1; i < n; i++) {
        if (pipe(fd) == -1) {
            if (i == 1) {
                exit(1);
            }
            killpid(mas, i - 1, fd);
        }
        int pid = fork();
        if (pid < 0) {
            killpid(mas, i - 1, fd);
        }
        if (!pid) {
            close(fd[0]);
            dup2(fd[1], 1);
            close(fd[1]);
            execlp(argv[i], argv[i], NULL);
            exit(1);
        }
        mas[i - 1] = pid;
        dup2(fd[0], 0);
        close(fd[0]);
        close(fd[1]);
    }
    int pid2 = fork();
    if (pid2 < 0) {
        killpid(mas, n - 1, fd);
    }
    if (!pid2) {
        execlp(argv[n], argv[n], NULL);
        exit(1);
    }
    close(0);
    while (wait(NULL) != -1);
    free(mas);
    return 0;
}
