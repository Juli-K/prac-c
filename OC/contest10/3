#include <unistd.h>
#include <stdio.h>
#include <fcntl.h>
#include <stdlib.h>
#include <sys/wait.h>

int
main(int argc, const char * argv[]) {
    if (argc != 6) {
        _exit(1);
    }
    int fd[2];
    pipe(fd);
    int pid = fork();
    if (pid < 0) {
        _exit(1);
    }
    if (!pid) {
        close(fd[0]);
        dup2(fd[1], 1);
        close(fd[1]);
        int pid1 = fork();
        if (pid1 < 0) {
            _exit(1);
        }
        if (!pid1) {
            int fd1 = open(argv[4], O_RDONLY, 0666);
            if (fd1 < 0) {
                _exit(1);
            }
            dup2(fd1, 0);
            close(fd1);
            execlp("/bin/sh", "sh", "-c", argv[1], NULL);
            _exit(1);
        }
        int status;
        wait(&status);
        if (WIFEXITED(status) && !WEXITSTATUS(status)) {
            int pid2 = fork();
            if (pid2 < 0) {
                _exit(1);
            }
            if (!pid2) {
                execlp("/bin/sh", "sh", "-c", argv[2], NULL);
                _exit(1);
            }
            wait(NULL);
            exit(0);
        }
        exit(1);
    }
    int pid3 = fork();
    if (pid3 < 0) {
        _exit(1);
    }
    if (!pid3) {
        close(fd[1]);
        dup2(fd[0], 0);
        close(fd[0]);
        int fd2 = open(argv[5], O_WRONLY | O_CREAT | O_APPEND, 0666);
        if (fd2 < 0) {
            _exit(1);
        }
        dup2(fd2, 1);
        close(fd2);
        execlp("/bin/sh", "sh", "-c", argv[3], NULL);
        _exit(1);
    }
    close(fd[0]);
    close(fd[1]);
    while (wait(NULL) != -1);
    return 0;
}
