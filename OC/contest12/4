#include <unistd.h>
#include <stdio.h>
#include <stdlib.h>
#include <sys/wait.h>
#include <sys/ipc.h>
#include <limits.h>
#include <sys/sem.h>

int
main(int argc, const char * argv[]) {
    if (argc != 2) {
        exit(1);
    }
    int count;
    sscanf(argv[1], "%d", &count);
    key_t key;
    key = ftok(argv[0], 's');
    int id = semget(key, count, 0666 | IPC_CREAT);
    for (int i = 0; i < count; i++) {
        semctl(id, i, SETVAL, 0);
    }
    for (int i = 0; i < count; i++) {
        int pid = fork();
        if (pid < 0) {
            exit(1);
        }
        if (!pid) {
            while (1) {
                struct sembuf down = {i, -1, 0};
                if (semop(id, &down, 1) < 0) {
                    exit(0);
                }
                int n;
                setbuf(stdin, NULL);
                if (scanf("%d", &n) == EOF) {
                    exit(1);
                }
                printf("%d %d\n", i, n);
                fflush(stdout);
                int tmp;
                if (n >= 0 || (n < 0 && n % count == 0)) {
                    tmp = n % count;
                } else {
                    tmp = count + n % count;
                }
                struct sembuf up = {tmp, 1, 0};
                if (semop(id, &up, 1) < 0) {
                    exit(0);
                }
            }
        }
    }
    struct sembuf up = {0, 1, 0};
    semop(id, &up, 1);
    wait(NULL);
    semctl(id, 0, IPC_RMID, 0);
    while (wait(NULL) != -1);
    return 0;
}
