#include <unistd.h>
#include <stdlib.h>
#include <stdio.h>
#include <sys/sem.h>
#include <sys/shm.h>
#include <sys/wait.h>

void operation(int *data, int ind1, int ind2, int value);

int
main(int argc, const char * argv[]) {
    int count, key, nproc, iter_count;
    sscanf(argv[1], "%d", &count);
    sscanf(argv[2], "%d", &key);
    sscanf(argv[3], "%d", &nproc);
    sscanf(argv[4], "%d", &iter_count);
    int id = semget(key, count, IPC_CREAT | 0666);
    int id1 = shmget(key, count * sizeof(count), IPC_CREAT | 0666);
    int *p = shmat(id1, 0, 0);
    for (int i = 0; i < count; i++) {
        scanf("%d", &p[i]);
    }
    for (int i = 0; i < count; i++) {
        semctl(id, i, SETVAL, 1);
    }
    for (int i = 0; i < nproc; i++) {
        int pid = fork();
        if (!pid) {
            int tmp;
            sscanf(argv[i + 5], "%d", &tmp);
            srand(tmp);
            for (int j = 0; j < iter_count; j++) {
                int i1 = rand() / (RAND_MAX + 1.0) * count;
                int i2 = rand() / (RAND_MAX + 1.0) * count;
                int val = rand() / (RAND_MAX + 1.0) * 10;
                struct sembuf down[2] = {{i1, -1, 0}, {i2, -1, 0}};
                struct sembuf up[2] = {{i1, 1, 0}, {i2, 1, 0}};
                if (i1 != i2) {
                    if (semop(id, down, 2) < 0) {
                        exit(0);
                    }
                    operation(p, i1, i2, val);
                    semop(id, up, 2);
                }
            }
            exit(0);
        }
    }
    while (wait(NULL) != -1);
    for (int i = 0; i < count; i++) {
        printf("%d ", p[i]);
        fflush(stdout);
    }
    printf("\n");
    fflush(stdout);
    semctl(id, 0, IPC_RMID, 0);
    shmdt(p);
    shmctl(id1, IPC_RMID, 0);
    return 0;
}
