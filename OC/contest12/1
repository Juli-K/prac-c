#include <unistd.h>
#include <stdio.h>
#include <stdlib.h>
#include <sys/ipc.h>
#include <sys/sem.h>
#include <sys/wait.h>
#include <sys/shm.h>
int
main(int argc, const char * argv[]) {
    if (argc != 4) {
        exit(1);
    }
    int key, nproc;
    unsigned int maxval;
    sscanf(argv[1], "%d", &nproc);
    sscanf(argv[2], "%d", &key);
    sscanf(argv[3], "%u", &maxval);
    int id = semget(key, nproc, IPC_CREAT | 0666 | IPC_EXCL);
    int id1 = shmget(key, 2 * sizeof(nproc), IPC_CREAT | 0666 | IPC_EXCL);
    long long *p = shmat(id1, 0, 0);
    p[0] = 0;
    p[1] = 0;
    struct sembuf up1 = {0, 1, 0};
    if (semop(id, &up1, 1) < 0) {
        exit(0);
    }
    for (int i = 0; i < nproc; i++) {
        int pid = fork();
        if (!pid) {
            while (1) {
                struct sembuf down = {i, -1, 0};
                if (semop(id, &down, 1) < 0) {
                    exit(0);
                }
                printf("%d %lld %lld\n", i + 1, p[0], p[1]);
                fflush(stdout);
                if (p[0] < maxval) {
                    p[0]++;
                    p[1] = i + 1;
                    long long val = p[0], tmp;
                    tmp = (long long)(((((val * val) % nproc) * val) % nproc) * val) % nproc;
                    struct sembuf up = {tmp, 1, 0};
                    if (semop(id, &up, 1) < 0) {
                        exit(0);
                    }
                } else {
                    exit(0);
                }
            }
        }
    }
    wait(NULL);
    semctl(id, 0, IPC_RMID, 0);
    while (wait(NULL) != -1);
    shmdt(p);
    shmctl(id1, IPC_RMID, 0);
    return 0;
}
