#include <unistd.h>
#include <stdio.h>
#include <sys/ipc.h>
#include <sys/shm.h>
#include <fcntl.h>
#include <stdlib.h>


int
main(int argc, const char * argv[]) {
    int k = 1;
    while (k < argc - 1) {
        k *= 2;
    }
    int shmid = shmget(ftok(argv[0], 0), (2  * k - 1) * sizeof(int), IPC_CREAT | 0666);
    int *data  = shmat(shmid, NULL, 0);
    for (int i = 0; i < k - 1; i++) {
        data[i] = 0;
    }
    for (int i = k; i < k + argc - 1; i++) {
        data[i] = i - k + 1;
    }
    for (int i = k + argc; i < 2 * k - 1; i++) {
        data[i] = -1;
    }
    int i = 0;
    while (1) {
        if (data[i] == -1) {
            int fd = open(argv[i - k + 1], O_RDONLY);
            int a;
            while(read(fd, &a, sizeof(a)) == sizeof(a)) {
                write(1, &a, sizeof(a));
            }
            close(fd);
            close(1);
            exit(0);
        }
        int fd1[2], fd2[2];
        pipe(fd1);
        pipe(fd2);
        if (data[2 * i + 1] == -1) {
            if (!fork()) {
                close(fd1[0]);
                dup2(fd1[1], 1);
                close(fd1[1]);
                i = 2 * i + 1;
            } else {
                if (data[2 * i + 2] == -1) {
                    if (!fork()) {
                        dup2(fd2[1], 1);
                        close(fd2[1]);
                        i = 2 * i + 1;
                    }
                }
            }
        } else if (data[2 * i + 1] == 0){
            
        }
        
    }
}
return 0;
}
